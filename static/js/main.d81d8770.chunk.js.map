{"version":3,"sources":["Recordable.ts","useRecorder.ts","usePersistence.ts","Records.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RecordBuilder","records","this","debounceValue","reduce","acc","r","prev","length","timestamp","subRecords","concat","debounce","record","dateKey","format","Date","map","i","id","useRecorder","seed","save","React","useState","setRecords","queue","setQueue","addRecord","next","nanoid","now","count","compress","get","queueUpdate","value","rest","cancelQueue","submitQueue","encode","d","btoa","JSON","stringify","decode","s","parse","atob","usePersistence","inputNamespace","namespace","setNamespace","data","localStorage","setItem","load","defaultValue","blob","getItem","switchNamespace","newNamespace","lastSave","Timestamp","date","mode","update","time","className","Note","note","onChange","e","target","RecordDetails","Records","updateRecord","Object","keys","sort","group","u","subRecord","App","setMode","base","summary","groupByDate","ref","useRef","useGesture","onPinch","onWheel","process","onClick","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d81d8770.chunk.js","sourcesContent":["import { format } from \"date-fns\";\r\n\r\nexport interface Recordable {\r\n    id: string;\r\n    timestamp: number;\r\n    count: number;\r\n    note?: string;\r\n    subRecords?: Recordable[];\r\n}\r\n\r\nexport type GroupedRecordable = Record<string, Recordable[]>;\r\n\r\n// assumes a sorted list of records\r\nexport const debounce = (records: Recordable[], debounceValue = 60000) => {\r\n    return records.reduce<Recordable[]>((acc, r) => {\r\n        const prev = acc[acc.length - 1];\r\n        if (r.timestamp - prev?.timestamp < debounceValue) {\r\n            prev.subRecords = (prev.subRecords ?? []).concat(r);\r\n            return acc;\r\n        } else {\r\n            return acc.concat({...r});\r\n        }\r\n    }, []);\r\n}\r\n\r\nexport const groupByDate = (records: Recordable[]) => {\r\n    return records.reduce<GroupedRecordable>((acc, record) => {\r\n        const dateKey = format(new Date(record.timestamp), 'PP');\r\n        if (acc[dateKey]) {\r\n            acc[dateKey] = acc[dateKey].concat([record]);\r\n        } else {\r\n            acc[dateKey] = [record];\r\n        }\r\n        return acc;\r\n    }, {});\r\n};\r\n\r\nexport const compress = (records: Recordable[]) => {\r\n    return records.map((record, i) => {\r\n        return {\r\n            ...record,\r\n            id: `${i}`,\r\n        };\r\n    });\r\n}\r\n\r\nclass RecordBuilder {\r\n    private records;\r\n\r\n    constructor(records: Recordable[]) {\r\n        this.records = records;\r\n    }\r\n\r\n    public get get() {\r\n        return this.records;\r\n    }\r\n\r\n    public debounce(debounceValue?: number): RecordBuilder {\r\n        this.records = debounce(this.records, debounceValue);\r\n        return this;\r\n    }\r\n\r\n    public groupByDate(): GroupedRecordable {\r\n        return groupByDate(this.records);\r\n    }\r\n\r\n    public compress(): RecordBuilder {\r\n        this.records = compress(this.records);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default RecordBuilder;\r\n","import type { Recordable } from './Recordable';\r\nimport React from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport RecordBuilder from './Recordable';\r\n\r\ninterface Result {\r\n    records: Recordable[];\r\n    addRecord: () => void;\r\n    setRecords: (next: Recordable[]) => void;\r\n    queue: Recordable[];\r\n    queueUpdate: (id: string, value: Recordable) => void;\r\n    cancelQueue: () => void;\r\n    submitQueue: () => void;\r\n}\r\n\r\nconst useRecorder = (seed = [] as Recordable[], save?: (data: any) => void ): Result => {\r\n    const [records, setRecords] = React.useState<Recordable[]>(seed);\r\n    const [queue, setQueue] = React.useState<Recordable[]>([]);\r\n\r\n    const addRecord = () => {\r\n        setRecords(prev => {\r\n            const next = prev.concat([{\r\n                id: nanoid(),\r\n                timestamp: Date.now(),\r\n                count: 1\r\n            }]);\r\n            save?.(new RecordBuilder(next).compress().get);\r\n            return next;\r\n        });\r\n    };\r\n\r\n    const queueUpdate = (id: string, value: Recordable) => {\r\n        setQueue((prev) => {\r\n            const base = prev.length === 0 ? records : prev;\r\n            const next = base.map((r) => {\r\n                if (r.id === id) {\r\n                    const { subRecords, ...rest } = value;\r\n                    return {\r\n                        ...r,\r\n                        ...rest,\r\n                    };\r\n                }\r\n                return r;\r\n            });\r\n            return next;\r\n        });\r\n    };\r\n\r\n    const cancelQueue = () => {\r\n        setQueue(records);\r\n        setQueue([]);\r\n    };\r\n\r\n    const submitQueue = () => {\r\n        setRecords(queue);\r\n        setQueue([]);\r\n    };\r\n    \r\n    return { records, addRecord, setRecords, queue, queueUpdate, cancelQueue, submitQueue };\r\n}\r\n\r\nexport default useRecorder;\r\n","import React from 'react';\r\n\r\nconst encode = (d: any) => btoa(JSON.stringify(d));\r\nconst decode = (s: string) => JSON.parse(atob(s));\r\n\r\ninterface Result<T> {\r\n    save: (data: any) => void;\r\n    load: (defaultValue: T) => T;\r\n    switchNamespace: (name: string, defaultValue: T) => T;\r\n}\r\n\r\nconst usePersistence = <T>(inputNamespace = 'foo'): Result<T> => {\r\n    const [namespace, setNamespace] = React.useState(inputNamespace);\r\n    const save = (data: any) => {\r\n        localStorage.setItem(`fc-${namespace}-64`, encode(data));\r\n    };\r\n\r\n    const load = (defaultValue: T): T => {\r\n        const blob = localStorage.getItem(`fc-${namespace}-64`);\r\n        if (blob) {\r\n            return decode(blob);\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    const switchNamespace = (newNamespace: string, defaultValue: T) => {\r\n        setNamespace(newNamespace);\r\n        return load(defaultValue);\r\n    }\r\n\r\n    const lastSave = localStorage.getItem('fc-lastSave');\r\n    if (lastSave) {\r\n        setNamespace(lastSave);\r\n    }\r\n\r\n    return {\r\n        save,\r\n        load,\r\n        switchNamespace\r\n    };\r\n};\r\n\r\nexport default usePersistence;\r\n","import type { GroupedRecordable, Recordable } from './Recordable';\r\nimport React from 'react';\r\nimport './Records.css';\r\nimport { format } from 'date-fns/esm';\r\nimport { editTime } from './release-flags';\r\n\r\ninterface Props {\r\n  records: GroupedRecordable;\r\n  mode: boolean;\r\n  updateRecord: (id: string, value: Recordable) => void;\r\n}\r\n\r\ninterface TProps {\r\n  record: Recordable;\r\n  mode: boolean;\r\n  update: (value: Recordable) => void;\r\n}\r\n\r\nconst Timestamp: React.FC<TProps> = ({ record, mode, update }) => {\r\n  const date = new Date(record.timestamp)\r\n  const time = editTime && mode\r\n    ? `${format(date, 'yyyy-MM-dd')}T${format(date, 'HH:mm')}`\r\n    : format(date, 'p');\r\n\r\n  return editTime && mode ? (\r\n    <input\r\n      type=\"datetime-local\"\r\n      value={time}\r\n      onChange={(e) => update({\r\n        ...record,\r\n        timestamp: new Date(e.target.value).getTime(),\r\n      })}\r\n    />\r\n  ) : (\r\n    <div className=\"record-time\">{time}</div>\r\n  );\r\n};\r\n\r\nconst Note: React.FC<TProps> = ({ record, mode, update }) => {\r\n  return mode ? (\r\n    <input\r\n      value={record.note ?? ''}\r\n      onChange={(e) => update({\r\n        ...record,\r\n        note: e.target.value,\r\n      })}\r\n    />\r\n  ) : (\r\n    <div className=\"record-note\">{record.note}</div>\r\n  );\r\n};\r\n\r\nconst RecordDetails: React.FC<TProps> = ({ record, mode, update }) => {\r\n  return (\r\n    <div className=\"record-item-details\">\r\n      <Timestamp record={record} mode={mode} update={update} />\r\n      <div className=\"record-count\">{(record.subRecords ?? []).length + 1}</div>\r\n      <Note record={record} mode={mode} update={update} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Records: React.FC<Props> = ({ records, mode, updateRecord }) => {\r\n  return (\r\n    <div className=\"records\">\r\n      {Object.keys(records)\r\n        .sort()\r\n        .map((group) => (\r\n          <div className=\"group\" key={group}>\r\n            <div className=\"group-title\">{group}</div>\r\n            {records[group].map((record) => (\r\n              <div key={record.id} className=\"record-item\">\r\n                <RecordDetails record={record} mode={mode} update={(u) => updateRecord(record.id, u)} />\r\n                {mode && record.subRecords && (\r\n                  <div className=\"record-sub-items\">\r\n                    {record.subRecords.map((subRecord) => (\r\n                      <RecordDetails\r\n                        record={subRecord}\r\n                        mode={mode}\r\n                        update={(u) => updateRecord(subRecord.id, u)}\r\n                        key={subRecord.id}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Records;\r\n","import type { Recordable } from './Recordable';\r\n\r\nimport React from 'react';\r\nimport { useGesture } from '@use-gesture/react';\r\nimport './App.css';\r\nimport useRecorder from './useRecorder';\r\nimport usePersistence from './usePersistence';\r\nimport Records from './Records';\r\nimport RecordBuilder from './Recordable';\r\n\r\nconst DEV_MODE = process.env.NODE_ENV === 'development';\r\n\r\nfunction App() {\r\n  const [mode, setMode] = React.useState(false);\r\n  const { save, load } = usePersistence<Recordable[]>();\r\n  const {\r\n    records,\r\n    addRecord,\r\n    queue,\r\n    queueUpdate,\r\n    cancelQueue,\r\n    submitQueue,\r\n  } = useRecorder(load([] as Recordable[]), save);\r\n\r\n  const base = mode && queue.length > 0 ? queue : records;\r\n  const summary = new RecordBuilder(base).debounce().groupByDate();\r\n\r\n  const ref = React.useRef<HTMLDivElement | null>(null);\r\n  useGesture({\r\n    onPinch: () => {\r\n      setMode(true);\r\n    },\r\n    onWheel: (e) => {\r\n      if (DEV_MODE && e.ctrlKey) {\r\n        setMode(true);\r\n      }\r\n    }},\r\n    {\r\n      target: ref,\r\n    }\r\n  );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!mode && <div id=\"receiver\" onClick={addRecord} ref={ref} />}\r\n      <h1>Frequency</h1>\r\n      <div className=\"container\">\r\n        <Records records={summary} mode={mode} updateRecord={queueUpdate} />\r\n      </div>\r\n      {mode && (\r\n        <div className=\"mode-tools\">\r\n          <button className=\"cancel\" onClick={() => {\r\n            cancelQueue();\r\n            setMode(false);\r\n          }}>\r\n            Cancel\r\n          </button>\r\n          <button className=\"done\" disabled={queue.length === 0} onClick={() => {\r\n            submitQueue();\r\n            setMode(false);\r\n          }}>\r\n            Save\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}