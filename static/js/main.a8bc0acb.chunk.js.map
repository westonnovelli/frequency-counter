{"version":3,"sources":["useRecorder.ts","usePersistence.ts","Records.tsx","Recordable.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useRecorder","seed","save","React","useState","records","setRecords","addRecord","prev","next","concat","timestamp","Date","now","count","encode","d","btoa","JSON","stringify","decode","s","parse","atob","usePersistence","inputNamespace","namespace","setNamespace","data","localStorage","setItem","load","defaultValue","blob","getItem","switchNamespace","newNamespace","lastSave","Records","className","Object","keys","sort","map","group","record","toLocaleTimeString","RecordBuilder","this","debounceValue","reduce","acc","r","i","length","debounce","date","dateKey","getFullYear","getMonth","getDate","App","summary","debouce","groupByDate","showRaw","id","onClick","style","display","justifyContent","flexDirection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8bc0acb.chunk.js","sourcesContent":["import type { Recordable } from './Recordable';\r\nimport React from 'react';\r\n\r\nconst useRecorder = (seed = [] as Recordable[], save?: (data: any) => void ): [Recordable[], () => void] => {\r\n    const [records, setRecords] = React.useState<Recordable[]>(seed);\r\n\r\n    const addRecord = () => {\r\n        setRecords(prev => {\r\n            const next = prev.concat([{timestamp: Date.now(), count: 1}]);\r\n            save?.(next);\r\n            return next;\r\n        });\r\n    };\r\n    \r\n    return [records, addRecord]\r\n}\r\n\r\nexport default useRecorder;\r\n","import React from 'react';\r\n\r\nconst encode = (d: any) => btoa(JSON.stringify(d));\r\nconst decode = (s: string) => JSON.parse(atob(s));\r\n\r\ninterface Result<T> {\r\n    save: (data: any) => void;\r\n    load: (defaultValue: T) => T;\r\n    switchNamespace: (name: string, defaultValue: T) => T;\r\n}\r\n\r\nconst usePersistence = <T>(inputNamespace = 'foo'): Result<T> => {\r\n    const [namespace, setNamespace] = React.useState(inputNamespace);\r\n    const save = (data: any) => {\r\n        localStorage.setItem(`fc-${namespace}-64`, encode(data));\r\n    };\r\n\r\n    const load = (defaultValue: T): T => {\r\n        const blob = localStorage.getItem(`fc-${namespace}-64`);\r\n        if (blob) {\r\n            return decode(blob);\r\n        }\r\n        return defaultValue;\r\n    }\r\n\r\n    const switchNamespace = (newNamespace: string, defaultValue: T) => {\r\n        setNamespace(newNamespace);\r\n        return load(defaultValue);\r\n    }\r\n\r\n    const lastSave = localStorage.getItem('fc-lastSave');\r\n    if (lastSave) {\r\n        setNamespace(lastSave);\r\n    }\r\n\r\n    return {\r\n        save,\r\n        load,\r\n        switchNamespace\r\n    };\r\n};\r\n\r\nexport default usePersistence;\r\n","import type { GroupedRecordable } from './Recordable';\r\nimport React from 'react';\r\nimport './Records.css';\r\n\r\ninterface Props {\r\n    records: GroupedRecordable;\r\n}\r\n\r\nconst Records: React.FC<Props> = ({ records }) => {\r\n    return (\r\n        <div className=\"records\">\r\n          {Object.keys(records).sort().map((group) => (\r\n            <div className=\"group\" key={group}>\r\n              <span className=\"group-title\">{group}</span>\r\n              {records[group].map((record) =>  (\r\n                <span key={record.timestamp}>{new Date(record.timestamp).toLocaleTimeString()} - {record.count}</span>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Records;\r\n","\r\nexport interface Recordable {\r\n    timestamp: number;\r\n    count: number;\r\n    note?: string;\r\n}\r\n\r\nexport type GroupedRecordable = Record<string, Recordable[]>;\r\n\r\n// assumes a sorted list of records\r\nexport const debounce = (records: Recordable[], debounceValue = 2000) => {\r\n    return records.reduce<Recordable[]>((acc, r, i) => {\r\n        if (r.timestamp - acc[acc.length - 1]?.timestamp < debounceValue) {\r\n            acc[acc.length - 1].count += 1;\r\n            return acc;\r\n        } else {\r\n            return acc.concat({...r});\r\n        }\r\n    }, []);\r\n}\r\n\r\nexport const groupByDate = (records: Recordable[]) => {\r\n    return records.reduce<GroupedRecordable>((acc, record) => {\r\n        const date = new Date(record.timestamp);\r\n        const dateKey = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\r\n        if (acc[dateKey]) {\r\n            acc[dateKey] = acc[dateKey].concat([record]);\r\n        } else {\r\n            acc[dateKey] = [record];\r\n        }\r\n        return acc;\r\n    }, {});\r\n};\r\n\r\nclass RecordBuilder {\r\n    private records;\r\n\r\n    constructor(records: Recordable[]) {\r\n        this.records = records;\r\n    }\r\n\r\n    public get get() {\r\n        return this.records;\r\n    }\r\n\r\n    public debouce(debounceValue?: number): RecordBuilder {\r\n        this.records = debounce(this.records, debounceValue);\r\n        return this;\r\n    }\r\n\r\n    public groupByDate(): GroupedRecordable {\r\n        return groupByDate(this.records);\r\n    }\r\n}\r\n\r\nexport default RecordBuilder;\r\n","import type { Recordable } from './Recordable';\n\nimport React from 'react';\nimport './App.css';\nimport useRecorder from './useRecorder';\nimport usePersistence from './usePersistence';\nimport Records from './Records';\nimport RecordBuilder from './Recordable';\n\nfunction App() {\n  const { save, load } = usePersistence<Recordable[]>();\n  const [ records, record ] = useRecorder(load([] as Recordable[]), save);\n\n  const summary = new RecordBuilder(records).debouce().groupByDate();\n\n  const [showRaw, _setShowRaw] = React.useState(false);\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Frequency Counter\n      </h1>\n      <div id=\"receiver\" onClick={record} />\n      <div style={{display: 'flex', justifyContent: 'center'}}>\n        <Records records={summary} />\n        {showRaw && <div style={{display: 'flex', flexDirection: 'column'}}>\n          raw\n          {records.map((r) => (\n            <span key={r.timestamp}>{r.timestamp} - {r.count}</span>\n          ))}\n        </div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}